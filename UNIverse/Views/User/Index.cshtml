@using Microsoft.AspNet.Identity
@model UNIverse.Models.ViewModels.UserProfileViewModel

@{
    ViewBag.Title = "Index";
}

<link href="@Url.Content("~/Content/Profile.css")" rel="stylesheet" type="text/css" />

<div class="col-md-6 col-md-push-6 userProfile">
    <div class="profilepic">
        <img src="@Url.Content(Model.ProfilePicturePath)" class="img-responsive" alt="Profile pic not found" />
    </div>




    @if (User.Identity.GetUserId() != Model.userId && !Model.IsMyFriend && !Model.HasRequestFromMe && !Model.HaveRequestFromHim)
    {
        <div class="addFriend">
            @using(Html.BeginForm("AddFriend", "User", new { userId = Model.userId, returnUrl = this.Request.RawUrl }, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <input type="submit" value="Add Friend" class="btn btn-default"/>
            }
        </div>
    }
    
    @if(Model.HasRequestFromMe == true)
    {
        <div class="addFriend">
            <button type="button" value="Awaiting response..." class="btn btn-default" disabled>Awaiting Response...</button>
        </div>
    }
    
    @if(Model.HaveRequestFromHim == true)
    {
        <div class="addFriend">
            @using(Html.BeginForm("AddFriend", "User", new { userId = Model.userId, returnUrl = this.Request.RawUrl }, FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <input type="submit" value="Accept request" class="btn btn-default"/>
            }
        </div>
    }
    
    <div class="info">
        <h2>@Model.Name</h2>
        <h4>@Model.School.Name</h4>
        <p>@Model.Description</p>
    </div>

    <div class="Groups">
        <h3>Groups</h3>
        @if (Model.Groups != null)
        {
            foreach (var item in Model.Groups)
            {
                <ul>
                    <li>@Html.ActionLink(item.Name, "View", "Group", new { id = item.Id }, null)</li>
                </ul>
            }
        }
    </div>

    
    @if(Model.IsMyFriend || Model.userId == this.User.Identity.GetUserId())
    {
        <div class="Friends">
            <h3>Friends (@Model.Friends.Count())</h3>
        </div>
        
        <div class="addFriend">
            @if (Model.IsMyFriend && User.Identity.GetUserId() != Model.userId)
            {
                <div class="removeFriend">
                    @using (Html.BeginForm("RemoveFriend", "User", new { userId = Model.userId, returnUrl = this.Request.RawUrl }, FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true)
                        <input type="submit" value="Remove Friend" class="btn btn-default" />
                    }
                </div>
            }
        </div>
    }
    
    @if (Model.userId == this.User.Identity.GetUserId())
    {
        <div class="myRequests">
            <h3>Sent friend requests</h3>
            @foreach (var request in Model.SentFriendRequests)
            {
                <h4>@(request.Receiver.FirstName + " " + request.Receiver.LastName)</h4>
                <p>Request since @request.RequestDate</p>
                using (Html.BeginForm("RemoveFriend", "User", new { userId = request.Receiver.Id, returnUrl = this.Request.RawUrl }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <input type="submit" value="Withdraw request" class="btn btn-default" />
                }
                <hr />
            }

            <h3>Received friend requests</h3>
            @foreach (var request in Model.ReceivedFriendRequests)
            {
                <h4>@(request.Sender.FirstName + " " + request.Sender.LastName)</h4>
                <p>Request since @request.RequestDate</p>
                using (Html.BeginForm("AddFriend", "User", new { userId = request.Sender.Id, returnUrl = this.Request.RawUrl }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)

                    <input type="submit" value="Accept Request" class="btn btn-default" />
                }

                using (Html.BeginForm("RemoveFriend", "User", new { userId = request.Sender.Id, returnUrl = this.Request.RawUrl }, FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <input type="submit" value="Decline Request" class="btn btn-default" />
                }
                <hr />
                
            }
        </div>
    }
</div>

@if ((Model.IsMyFriend || User.Identity.GetUserId() == Model.userId) && Model.Posts.ToList().Count != 0)
{
    <div class="container-fluid col-md-6 col-md-pull-6 newsfeed">
        @{Html.RenderPartial("_NewsfeedPartial", new UNIverse.Models.ViewModels.PostViewModel() { Posts = Model.Posts });}        
    </div>
}
